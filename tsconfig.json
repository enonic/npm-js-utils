{ // https://www.typescriptlang.org/tsconfig
	"compilerOptions": {
		//──────────────────────────────────────────────────────────────────────
		// Type Checking
		//──────────────────────────────────────────────────────────────────────
		"noImplicitAny": false,
		"noPropertyAccessFromIndexSignature": true,
		"noUncheckedIndexedAccess": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		// The strict flag enables a wide range of type checking behavior that
		// results in stronger guarantees of program correctness. Turning this
		// on is equivalent to enabling all of the strict mode family options,
		// which are outlined below. You can then turn off individual strict
		// mode family checks as needed.
		// Future versions of TypeScript may introduce additional stricter
		// checking under this flag, so upgrades of TypeScript might result in
		// new type errors in your program. When appropriate and possible, a
		// corresponding flag will be added to disable that behavior.
		"strict": true,
		"strictFunctionTypes": true,
		// When strictNullChecks is false, null and undefined are effectively
		// ignored by the language. This can lead to unexpected errors at
		// runtime.
		// When strictNullChecks is true, null and undefined have their own
		// distinct types and you’ll get a type error if you try to use them
		// where a concrete value is expected.
		// NOTE: Setting it to true gives errors which are NOT really errors in lib/xp/node.ts
		"strictNullChecks": false,

		//──────────────────────────────────────────────────────────────────────
		// Modules
		//──────────────────────────────────────────────────────────────────────
		"baseUrl": ".",
		"module": "commonjs",
		"moduleResolution": "node",
		"paths": {
			// Production (should be commented in when commiting)
			"@enonic/js-utils": ["src"],
			"/lib/xp/app": ["node_modules/@enonic-types/lib-app"],
			"/lib/xp/auth": ["node_modules/@enonic-types/lib-auth"],
			"/lib/xp/content": ["node_modules/@enonic-types/lib-content"],
			"/lib/xp/event": ["node_modules/@enonic-types/lib-event"],
			"/lib/xp/io": ["node_modules/@enonic-types/lib-io"],
			"/lib/xp/mail": ["node_modules/@enonic-types/lib-mail"],
			"/lib/xp/node": ["node_modules/@enonic-types/lib-node"],
			"/lib/xp/portal": ["node_modules/@enonic-types/lib-portal"],
			"/lib/xp/repo": ["node_modules/@enonic-types/lib-repo"],
			"/lib/xp/schema": ["node_modules/@enonic-types/lib-schema"],
			"/lib/xp/value": ["node_modules/@enonic-types/lib-value"],
			// Development (should be commented out when commiting)
			// "@enonic-types/core": ["../xp/modules/lib/core/index.d.ts"],
			// "/lib/xp/app": ["../xp/modules/lib/lib-app/src/main/resources/lib/xp/app.ts"],
			// "/lib/xp/auth": ["../xp/modules/lib/lib-auth/src/main/resources/lib/xp/auth.ts"],
			// "/lib/xp/content": ["../xp/modules/lib/lib-content/src/main/resources/lib/xp/content.ts"],
			// "/lib/xp/event": ["../xp/modules/lib/lib-event/src/main/resources/lib/xp/event.ts"],
			// "/lib/xp/io": ["../xp/modules/lib/lib-io/src/main/resources/lib/xp/io.ts"],
			// "/lib/xp/mail": ["../xp/modules/lib/lib-mail/src/main/resources/lib/xp/mail.ts"],
			// "/lib/xp/node": ["../xp/modules/lib/lib-node/src/main/resources/lib/xp/node.ts"],
			// "/lib/xp/portal": ["../xp/modules/lib/lib-portal/src/main/resources/lib/xp/portal.ts"],
			// "/lib/xp/repo": ["../xp/modules/lib/lib-repo/src/main/resources/lib/xp/repo.ts"],
			// "/lib/xp/schema": ["../xp/modules/lib/lib-schema/src/main/resources/lib/xp/schema.ts"],
			// "/lib/xp/value": ["../xp/modules/lib/lib-value/src/main/resources/lib/xp/value.ts"],
			// Doesn't help:
			// "node_modules/@enonic-types/lib-node/node.d.ts": ["../xp/modules/lib/lib-node/build/typescript/lib/xp/node.d.ts"],
		},
		"resolveJsonModule": true,

		// It's important to set rootDir, or it will be inferred:
		// The inferred value for rootDir is the longest common path of all non-declaration input files
		"rootDir": "src",
		//"rootDir": "..", // This affects the output!

		// Using rootDirs, you can inform the compiler that there are many
		// “virtual” directories acting as a single root. This allows the
		// compiler to resolve relative module imports within these “virtual”
		// directories, as if they were merged in to one directory.
		//"rootDirs": [
		//	"src",
		//	"node_modules",
		//	"test"
		//],

		// By default all visible ”@types” packages are included in your compilation.
		// Packages in node_modules/@types of any enclosing folder are considered visible.
		// For example, that means packages within ./node_modules/@types/,
		// ../node_modules/@types/, ../../node_modules/@types/, and so on.
		// If typeRoots is specified, only packages under typeRoots will be included.
		"typeRoots": [
			"node_modules/@types",
			"node_modules/@enonic-types",
		],

		// By default all visible ”@types” packages are included in your compilation.
		// Packages in node_modules/@types of any enclosing folder are considered visible.
		// For example, that means packages within ./node_modules/@types/,
		// ../node_modules/@types/, ../../node_modules/@types/, and so on.
		// If types is specified, only packages listed will be included in the global scope.
		// This feature differs from typeRoots in that it is about specifying only the exact
		// types you want included, whereas typeRoots supports saying you want particular folders.
		"types": [
			//"node", // Since @enonic/js-utils is supposed to run anywhere we can't depend on node...
			"@enonic-types/global",
			"@enonic-types/lib-app" // Is this still needed?
		],

		//──────────────────────────────────────────────────────────────────────
		// Emit
		//──────────────────────────────────────────────────────────────────────
		"declaration": true,
		"declarationMap": false,
		"downlevelIteration": true,
		"importHelpers": true,
		"importsNotUsedAsValues": "error",
		"inlineSourceMap": false,
		"inlineSources": false,
		"noEmitOnError": true,
		"outDir": "dist/cjs",
		"removeComments": true,
		"sourceMap": false,

		//──────────────────────────────────────────────────────────────────────
		// JavaScript Support
		//──────────────────────────────────────────────────────────────────────
		"allowJs": false,

		//──────────────────────────────────────────────────────────────────────
		// Language and Environment
		//──────────────────────────────────────────────────────────────────────
		// "lib": [
		// 	//"es3",
		// 	"es5",
		// 	//"es6", // alias for es2015
		// 	//"es7", // alias for es2016
		// 	//"es2015",

		// 	// enonic/js-utils is supposed to run "anywhere", but target is
		// 	// currently set to es5, to including es5 should be fine:
		// 	// Number.isInteger
		// 	// string.endsWith
		// 	// string.startsWith
		// 	"ES2015.Core"
		// ],
		"noLib": true, // Avoid types that doesn't exist in Nashorn
		"target": "ES5",

		//──────────────────────────────────────────────────────────────────────
		// Compiler Diagnostics
		//──────────────────────────────────────────────────────────────────────
		"listEmittedFiles": false,
		"listFiles": false,

		//──────────────────────────────────────────────────────────────────────
		// Output Formatting
		//──────────────────────────────────────────────────────────────────────
		"noErrorTruncation": true,

		//──────────────────────────────────────────────────────────────────────
		// Completeness
		//──────────────────────────────────────────────────────────────────────
		// Skip type checking of declaration files.
		//
		// This can save time during compilation at the expense of type-system
		// accuracy. For example, two libraries could define two copies of the
		// same type in an inconsistent way. Rather than doing a full check of
		// all d.ts files, TypeScript will type check the code you specifically
		// refer to in your app’s source code.
		"skipLibCheck": true,
	},

	// Specifies an array of filenames or patterns that should be skipped when
	// resolving include.
	// Important: exclude only changes which files are included as a result of
	// the include setting. A file specified by exclude can still become part of
	// your codebase due to an import statement in your code, a types inclusion,
	// a /// <reference directive, or being specified in the files list.
	// It is not a mechanism that prevents a file from being included in the
	// codebase - it simply changes what the include setting finds.
	"exclude": [
		"**/*.d.ts",
		// After reading the explanatio above, these make no sense, since they are not part of include:
		// "node_modules"
		// "./node_modules/**/*", // Doesn't help
		// "../xp/**/*", // Doesn't help
	],

	// Specifies an allowlist of files to include in the program.
	// An error occurs if any of the files can’t be found.
	// This is useful when you only have a small number of files and don’t need
	// to use a glob to reference many files. If you need that then use include.
	//"files": [
	//	"src/index.ts"
	//],

	// Specifies an array of filenames or patterns to include in the program.
	// These filenames are resolved relative to the directory containing the
	// tsconfig.json file.
	"include": [

		// This produces the same amount of files as "files":["src/index.ts"].
		// Maybe because the index file references everything...
		"src/**/*.ts",

		// "test/**/*.ts"
	]
}
