import {
	deepStrictEqual//,
	//notEqual,
	//notStrictEqual
} from 'assert';
import {
	fold//,
	//toStr
} from '@enonic/js-utils';


//const ASCII_FOLDING = 'ÆÐƎƏƐƔĲŊŒẞÞǷȜæðǝəɛɣĳŋœĸſßþƿȝĄƁÇĐƊĘĦĮƘŁØƠŞȘŢȚŦŲƯY̨Ƴąɓçđɗęħįƙłøơşșţțŧųưy̨ƴÁÀÂÄǍĂĀÃÅǺĄÆǼǢƁĆĊĈČÇĎḌĐƊÐÉÈĖÊËĚĔĒĘẸƎƏƐĠĜǦĞĢƔáàâäǎăāãåǻąæǽǣɓćċĉčçďḍđɗðéèėêëěĕēęẹǝəɛġĝǧğģɣĤḤĦIÍÌİÎÏǏĬĪĨĮỊĲĴĶƘĹĻŁĽĿʼNŃN̈ŇÑŅŊÓÒÔÖǑŎŌÕŐỌØǾƠŒĥḥħıíìiîïǐĭīĩįịĳĵķƙĸĺļłľŀŉńn̈ňñņŋóòôöǒŏōõőọøǿơœŔŘŖŚŜŠŞȘṢẞŤŢṬŦÞÚÙÛÜǓŬŪŨŰŮŲỤƯẂẀŴẄǷÝỲŶŸȲỸƳŹŻŽẒŕřŗſśŝšşșṣßťţṭŧþúùûüǔŭūũűůųụưẃẁŵẅƿýỳŷÿȳỹƴźżžẓ';

// WARNING For some reason these fail not equal test: Y̨y̨NN̈in̈I
//const ASCII_FOLDING = 'ÆÐƎƏƐƔĲŊŒẞÞǷȜæðǝəɛɣĳŋœĸſßþƿȝĄƁÇĐƊĘĦĮƘŁØƠŞȘŢȚŦŲƯƳąɓçđɗęħįƙłøơşșţțŧųưƴÁÀÂÄǍĂĀÃÅǺĄÆǼǢƁĆĊĈČÇĎḌĐƊÐÉÈĖÊËĚĔĒĘẸƎƏƐĠĜǦĞĢƔáàâäǎăāãåǻąæǽǣɓćċĉčçďḍđɗðéèėêëěĕēęẹǝəɛġĝǧğģɣĤḤĦÍÌİÎÏǏĬĪĨĮỊĲĴĶƘĹĻŁĽĿʼŃŇÑŅŊÓÒÔÖǑŎŌÕŐỌØǾƠŒĥḥħıíìîïǐĭīĩįịĳĵķƙĸĺļłľŀŉńňñņŋóòôöǒŏōõőọøǿơœŔŘŖŚŜŠŞȘṢẞŤŢṬŦÞÚÙÛÜǓŬŪŨŰŮŲỤƯẂẀŴẄǷÝỲŶŸȲỸƳŹŻŽẒŕřŗſśŝšşșṣßťţṭŧþúùûüǔŭūũűůųụưẃẁŵẅƿýỳŷÿȳỹƴźżžẓ';

const TESTS = [
	// These has equality issues
	['Y̨', 'Y-'],
	['y̨', 'y-'],
	//['N', 'N'],
	['N̈', 'N-'],
	//['i', 'i'],
	['n̈', 'n-'],
	//['I', 'I'],

	['Æ', 'AE'],
	['Ð', 'D'],
	['Ǝ', 'E'],
	['Ə', 'A'],
	['Ɛ', 'E'],
	['Ɣ', '-'],
	['Ĳ', 'IJ'],
	['Ŋ', 'N'],
	['Œ', 'OE'],
	['ẞ', 'SS'],
	['Þ', 'TH'],
	['Ƿ', 'W'],
	['Ȝ', 'Z'],
	['æ', 'ae'],
	['ð', 'd'],
	['ǝ', 'e'],
	['ə', 'a'],
	['ɛ', 'e'],
	['ɣ', '-'],
	['ĳ', 'ij'],
	['ŋ', 'n'],
	['œ', 'oe'],
	['ĸ', 'q'],
	['ſ', 's'],
	['ß', 'ss'],
	['þ', 'th'],
	['ƿ', 'w'],
	['ȝ', 'z'],
	['Ą', 'A'],
	['Ɓ', 'B'],
	['Ç', 'C'],
	['Đ', 'D'],
	['Ɗ', 'D'],
	['Ę', 'E'],
	['Ħ', 'H'],
	['Į', 'I'],
	['Ƙ', 'K'],
	['Ł', 'L'],
	['Ø', 'O'],
	['Ơ', 'O'],
	['Ş', 'S'],
	['Ș', 'S'],
	['Ţ', 'T'],
	['Ț', 'T'],
	['Ŧ', 'T'],
	['Ų', 'U'],
	['Ư', 'U'],
	['Ƴ', 'Y'],
	['ą', 'a'],
	['ɓ', 'b'],
	['ç', 'c'],
	['đ', 'd'],
	['ɗ', 'd'],
	['ę', 'e'],
	['ħ', 'h'],
	['į', 'i'],
	['ƙ', 'k'],
	['ł', 'l'],
	['ø', 'o'],
	['ơ', 'o'],
	['ş', 's'],
	['ș', 's'],
	['ţ', 't'],
	['ț', 't'],
	['ŧ', 't'],
	['ų', 'u'],
	['ư', 'u'],
	['ƴ', 'y'],
	['Á', 'A'],
	['À', 'A'],
	['Â', 'A'],
	['Ä', 'A'],
	['Ǎ', 'A'],
	['Ă', 'A'],
	['Ā', 'A'],
	['Ã', 'A'],
	['Å', 'A'],
	['Ǻ', 'A'],
	['Ą', 'A'],
	['Æ', 'AE'],
	['Ǽ', 'AE'],
	['Ǣ', 'AE'],
	['Ɓ', 'B'],
	['Ć', 'C'],
	['Ċ', 'C'],
	['Ĉ', 'C'],
	['Č', 'C'],
	['Ç', 'C'],
	['Ď', 'D'],
	['Ḍ', 'D'],
	['Đ', 'D'],
	['Ɗ', 'D'],
	['Ð', 'D'],
	['É', 'E'],
	['È', 'E'],
	['Ė', 'E'],
	['Ê', 'E'],
	['Ë', 'E'],
	['Ě', 'E'],
	['Ĕ', 'E'],
	['Ē', 'E'],
	['Ę', 'E'],
	['Ẹ', 'E'],
	['Ǝ', 'E'],
	['Ə', 'A'],
	['Ɛ', 'E'],
	['Ġ', 'G'],
	['Ĝ', 'G'],
	['Ǧ', 'G'],
	['Ğ', 'G'],
	['Ģ', 'G'],
	['Ɣ', '-'],
	['á', 'a'],
	['à', 'a'],
	['â', 'a'],
	['ä', 'a'],
	['ǎ', 'a'],
	['ă', 'a'],
	['ā', 'a'],
	['ã', 'a'],
	['å', 'a'],
	['ǻ', 'a'],
	['ą', 'a'],
	['æ', 'ae'],
	['ǽ', 'ae'],
	['ǣ', 'ae'],
	['ɓ', 'b'],
	['ć', 'c'],
	['ċ', 'c'],
	['ĉ', 'c'],
	['č', 'c'],
	['ç', 'c'],
	['ď', 'd'],
	['ḍ', 'd'],
	['đ', 'd'],
	['ɗ', 'd'],
	['ð', 'd'],
	['é', 'e'],
	['è', 'e'],
	['ė', 'e'],
	['ê', 'e'],
	['ë', 'e'],
	['ě', 'e'],
	['ĕ', 'e'],
	['ē', 'e'],
	['ę', 'e'],
	['ẹ', 'e'],
	['ǝ', 'e'],
	['ə', 'a'],
	['ɛ', 'e'],
	['ġ', 'g'],
	['ĝ', 'g'],
	['ǧ', 'G'],
	['ğ', 'g'],
	['ģ', 'g'],
	['ɣ', '-'],
	['Ĥ', 'H'],
	['Ḥ', 'H'],
	['Ħ', 'H'],
	['Í', 'I'],
	['Ì', 'I'],
	['İ', 'I'],
	['Î', 'I'],
	['Ï', 'I'],
	['Ǐ', 'I'],
	['Ĭ', 'I'],
	['Ī', 'I'],
	['Ĩ', 'I'],
	['Į', 'I'],
	['Ị', 'I'],
	['Ĳ', 'IJ'],
	['Ĵ', 'J'],
	['Ķ', 'K'],
	['Ƙ', 'K'],
	['Ĺ', 'L'],
	['Ļ', 'L'],
	['Ł', 'L'],
	['Ľ', 'L'],
	['Ŀ', 'L'],
	['ʼ', '-'],
	['Ń', 'N'],
	['Ň', 'N'],
	['Ñ', 'N'],
	['Ņ', 'N'],
	['Ŋ', 'N'],
	['Ó', 'O'],
	['Ò', 'O'],
	['Ô', 'O'],
	['Ö', 'O'],
	['Ǒ', 'O'],
	['Ŏ', 'O'],
	['Ō', 'O'],
	['Õ', 'O'],
	['Ő', 'O'],
	['Ọ', 'O'],
	['Ø', 'O'],
	['Ǿ', 'O'],
	['Ơ', 'O'],
	['Œ', 'OE'],
	['ĥ', 'h'],
	['ḥ', 'h'],
	['ħ', 'h'],
	['ı', 'i'],
	['í', 'i'],
	['ì', 'i'],
	['î', 'i'],
	['ï', 'i'],
	['ǐ', 'i'],
	['ĭ', 'i'],
	['ī', 'i'],
	['ĩ', 'i'],
	['į', 'i'],
	['ị', 'i'],
	['ĳ', 'ij'],
	['ĵ', 'j'],
	['ķ', 'k'],
	['ƙ', 'k'],
	['ĸ', 'q'],
	['ĺ', 'l'],
	['ļ', 'l'],
	['ł', 'l'],
	['ľ', 'l'],
	['ŀ', 'l'],
	['ŉ', 'n'],
	['ń', 'n'],
	['ň', 'n'],
	['ñ', 'n'],
	['ņ', 'n'],
	['ŋ', 'n'],
	['ó', 'o'],
	['ò', 'o'],
	['ô', 'o'],
	['ö', 'o'],
	['ǒ', 'o'],
	['ŏ', 'o'],
	['ō', 'o'],
	['õ', 'o'],
	['ő', 'o'],
	['ọ', 'o'],
	['ø', 'o'],
	['ǿ', 'o'],
	['ơ', 'o'],
	['œ', 'oe'],
	['Ŕ', 'R'],
	['Ř', 'R'],
	['Ŗ', 'R'],
	['Ś', 'S'],
	['Ŝ', 'S'],
	['Š', 'S'],
	['Ş', 'S'],
	['Ș', 'S'],
	['Ṣ', 'S'],
	['ẞ', 'SS'],
	['Ť', 'T'],
	['Ţ', 'T'],
	['Ṭ', 'T'],
	['Ŧ', 'T'],
	['Þ', 'TH'],
	['Ú', 'U'],
	['Ù', 'U'],
	['Û', 'U'],
	['Ü', 'U'],
	['Ǔ', 'U'],
	['Ŭ', 'U'],
	['Ū', 'U'],
	['Ũ', 'U'],
	['Ű', 'U'],
	['Ů', 'U'],
	['Ų', 'U'],
	['Ụ', 'U'],
	['Ư', 'U'],
	['Ẃ', 'W'],
	['Ẁ', 'W'],
	['Ŵ', 'W'],
	['Ẅ', 'W'],
	['Ƿ', 'W'],
	['Ý', 'Y'],
	['Ỳ', 'Y'],
	['Ŷ', 'Y'],
	['Ÿ', 'Y'],
	['Ȳ', 'Y'],
	['Ỹ', 'Y'],
	['Ƴ', 'Y'],
	['Ź', 'Z'],
	['Ż', 'Z'],
	['Ž', 'Z'],
	['Ẓ', 'Z'],
	['ŕ', 'r'],
	['ř', 'r'],
	['ŗ', 'r'],
	['ſ', 's'],
	['ś', 's'],
	['ŝ', 's'],
	['š', 's'],
	['ş', 's'],
	['ș', 's'],
	['ṣ', 's'],
	['ß', 'ss'],
	['ť', 't'],
	['ţ', 't'],
	['ṭ', 't'],
	['ŧ', 't'],
	['þ', 'th'],
	['ú', 'u'],
	['ù', 'u'],
	['û', 'u'],
	['ü', 'u'],
	['ǔ', 'u'],
	['ŭ', 'u'],
	['ū', 'u'],
	['ũ', 'u'],
	['ű', 'u'],
	['ů', 'u'],
	['ų', 'u'],
	['ụ', 'u'],
	['ư', 'u'],
	['ẃ', 'w'],
	['ẁ', 'w'],
	['ŵ', 'w'],
	['ẅ', 'w'],
	['ƿ', 'w'],
	['ý', 'y'],
	['ỳ', 'y'],
	['ŷ', 'y'],
	['ÿ', 'y'],
	['ȳ', 'y'],
	['ỹ', 'y'],
	['ƴ', 'y'],
	['ź', 'z'],
	['ż', 'z'],
	['ž', 'z'],
	['ẓ', 'z'],
];


describe('string', () => {
	describe('fold()', () => {
		/*for (var i = 0; i < ASCII_FOLDING.length; i++) {
			const unicodeChar = ASCII_FOLDING[i];
			const res = fold(unicodeChar);
			//it(`['${unicodeChar}', '${res}'],`, () => { // Used to write tests
			//it(`fold(${unicodeChar}) --> ${res},`, () => {
			/*it(`fold(${unicodeChar}) != ${unicodeChar}`, () => {
				notEqual(
					unicodeChar,
					fold(unicodeChar)
				)
			});*
			it(`fold(${unicodeChar}) !== ${unicodeChar}`, () => {
				notStrictEqual(
					unicodeChar,
					res
				)
			});
		}*/
		TESTS.forEach(([unicodeChar, folded]) => {
			it(`fold(${unicodeChar}) --> ${folded}`, () => {
				deepStrictEqual(
					folded,
					fold(unicodeChar)
				)
			});
		});
	});
});
